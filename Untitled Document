For the XML code, you can create a circular button by setting its background to a circle shape drawable and by using a selector to change the button's appearance when it's pressed:

Create a drawable resource file "circular_button.xml" in the drawable folder:
 
 
<shape xmlns:android="http://schemas.android.com/apk/res/android"
       android:shape="oval">
    <solid android:color="@color/colorAccent"/>
    <size
        android:width="60dp"
        android:height="60dp"/>
    <stroke android:width="2dp"
            android:color="@android:color/white"/>
</shape>
Create a selector "circular_button_selector.xml" in the drawable  
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_pressed="true">
        <shape android:shape="oval">
            <solid android:color="#9B9B9B"/>
            <size
                android:width="60dp"
                android:height="60dp"/>
            <stroke android:width="2dp"
                    android:color="@android:color/white"/>
        </shape>
    </item>
    <item>
        <shape android:shape="oval">
            <solid android:color="@color/colorAccent"/>
            <size
                android:width="60dp"
                android:height="60dp"/>
            <stroke android:width="2dp"
                    android:color="@android:color/white"/>
        </shape>
    </item>
</selector>
In your layout XML file, create a Button and set the background to the selector you created in the drawable folder:
python
Copy code
<Button
    android:id="@+id/button"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:background="@drawable/circular_button_selector"
    android:text="+"/>
For the Java code, you can create an animation to make the button blow out when it's pressed:

Create a "scale_out.xml" file in the anim folder:
php
Copy code
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <scale
        android:duration="200"
        android:fromXScale="1.0"
        android:fromYScale="1.0"
        android:pivotX="50%"
        android:pivotY="50%"
        android:toXScale="1.2"
        android:toYScale="1.2"/>
</set>
In your MainActivity class, you can set an animation listener on the button to start the animation when the button is pressed and to stop the animation when the button is released:
java
Copy code
Button button = findViewById(R.id.button);
final Animation scaleOut = AnimationUtils.loadAnimation(this, R.anim.scale_out);

button.setOnTouchListener(new View.OnTouchListener() {
    @Override
